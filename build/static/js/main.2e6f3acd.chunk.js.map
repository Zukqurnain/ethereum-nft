{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","checkIfWalletIsConnected","window","ethereum","console","log","request","method","accounts","length","account","setupEventListener","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","connectedContract","makeAnEpicNFT","nftTxn","wait","hash","goerliChainIdConnected","chainId","useEffect","className","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"s2xEAAe,MAA0B,yC,uBCOnCA,EAAiB,cACjBC,EAAY,8BAA0BD,GAItCE,EAAmB,6CAoKVC,EAlKH,WAER,MAA4CC,mBAAS,IAAG,mBAAjDC,EAAc,KAAEC,EAAiB,KAElCC,EAAwB,iDAAG,oGACf,GADe,EACVC,OAAbC,EAAQ,EAARA,SAEM,CAAD,eACmC,OAA5CC,QAAQC,IAAI,gCAAgC,0BAG5CD,QAAQC,IAAI,8BAA+BF,GAAU,uBAGlCA,EAASG,QAAQ,CAAEC,OAAQ,iBAAkB,KAAD,EAE3C,KAFlBC,EAAQ,QAEDC,QACHC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GACjDV,EAAkBU,GAIbC,KAEAP,QAAQC,IAAI,+BACf,4CACJ,kBAvB+B,mCAyB1BO,EAAa,iDAAG,kGAEF,GAFE,WAEGV,OAAbC,EAAQ,EAARA,SAEM,CAAD,eACY,OAAvBU,MAAM,iBAAiB,0CAIFV,EAASG,QAAQ,CAAEC,OAAQ,wBAAyB,KAAD,EAApEC,EAAQ,OAEdJ,QAAQC,IAAI,YAAaG,EAAS,IAClCR,EAAkBQ,EAAS,IAI3BG,IAAoB,kDAEpBP,QAAQC,IAAI,EAAD,IAAO,0DAErB,kBApBkB,mCAuBbM,EAAkB,iDAAG,oGAEzB,IAAK,EACkBT,QAAbC,EAAQ,EAARA,WAIAW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YACE,IAAIJ,IAAOK,SAASxB,EAAkByB,EAAUC,IAAKJ,GAK7DK,GAAG,oBAAoB,SAACC,EAAMC,GAC9CrB,QAAQC,IAAImB,EAAMC,EAAQC,YAC1Bb,MAAM,kMAAD,OAAmMjB,EAAgB,YAAI6B,EAAQC,YACtO,IAEAtB,QAAQC,IAAI,0BAGZD,QAAQC,IAAI,iCAIhB,CAFE,MAAOsB,GACPvB,QAAQC,IAAIsB,EACd,CAAC,2CACF,kBA3BuB,mCA6BlBC,EAAoB,iDAAG,wGAET,GAFS,WAEJ1B,SAAbC,EAAQ,EAARA,UAEK,CAAD,gBAK0C,OAJ9CW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBU,EAAoB,IAAId,IAAOK,SAASxB,EAAkByB,EAAUC,IAAKJ,GAE/Ed,QAAQC,IAAI,yCAAwC,SACjCwB,EAAkBC,gBAAgB,KAAD,EAEhB,OAFhCC,EAAM,OAEV3B,QAAQC,IAAI,yBAAwB,UAC9B0B,EAAOC,OAAO,KAAD,GACnB5B,QAAQC,IAAI0B,GACZ3B,QAAQC,IAAI,2DAAD,OAA4D0B,EAAOE,OAAQ,wBAGtF7B,QAAQC,IAAI,kCAAkC,0DAGhDD,QAAQC,IAAI,EAAD,IAAO,0DAErB,kBAvByB,mCAyBpB6B,EAAsB,iDAAG,kGACb,OADa,EACRhC,OAAbC,EAAQ,EAARA,SAAQ,SAEIA,EAASG,QAAQ,CAAEC,OAAQ,gBAAiB,KAAD,EAA3D4B,EAAO,OACX/B,QAAQC,IAAI,sBAAwB8B,GAGd,cAClBA,EACFtB,MAAM,qDAENZ,IACD,2CACF,kBAb2B,mCAgB5BmC,qBAAU,WACRF,GACF,GAAG,IAcH,OACE,qBAAKG,UAAU,MAAK,SAClB,sBAAKA,UAAU,YAAW,UACxB,sBAAKA,UAAU,mBAAkB,UAC/B,mBAAGA,UAAU,uBAAsB,+BACnC,mBAAGA,UAAU,WAAU,mEAGH,KAAnBtC,EAnBP,wBAAQuC,QAAS1B,EAAeyB,UAAU,mCAAkC,+BAM5E,wBAAQC,QAASV,EAAsBS,UAAU,mCAAkC,yBAe/E,sBAAKA,UAAU,mBAAkB,UAC/B,qBAAKE,IAAI,eAAeF,UAAU,eAAeG,IAAKC,IACtD,mBACEJ,UAAU,cACVK,KAAM/C,EACNgD,OAAO,SACPC,IAAI,aAAY,6BACHlD,YAKzB,ECzKAmD,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,Q","file":"static/js/main.2e6f3acd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport './styles/App.css';\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 5;\n\nconst CONTRACT_ADDRESS = \"0x69e33C2F1a8c669EcDc8819bc742e0De0F87D21d\";\n\nconst App = () => {\n\n    const [currentAccount, setCurrentAccount] = useState(\"\");\n    \n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n          console.log(\"Make sure you have metamask!\");\n          return;\n      } else {\n          console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n\t\t\t\t\tsetCurrentAccount(account)\n          \n          // Setup listener! This is for the case where a user comes to our site\n          // and ALREADY had their wallet connected + authorized.\n          setupEventListener()\n      } else {\n          console.log(\"No authorized account found\")\n      }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener() \n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const goerliChainIdConnected = async () => {\n    const { ethereum } = window;\n\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n\n    // String, hex code of the chainId of the Goerli test network\n    const goerliChainId = \"0x5\"; \n    if (chainId !== goerliChainId) {\n      alert(\"You are not connected to the Goerli Test Network!\");\n    } else {\n      checkIfWalletIsConnected();\n    }\n  }\n\n\n  useEffect(() => {\n    goerliChainIdConnected();\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">\n      Mint NFT\n    </button>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}